{"version":3,"sources":["webpack:///./src/service/vueCodeString/html-parser.ts","webpack:///./src/service/common.ts","webpack:///./src/service/jsCodeString.ts","webpack:///./src/service/vueCodeString.ts","webpack:///src/components/HelloWorld.vue","webpack:///./src/components/HelloWorld.vue?96b5","webpack:///./src/components/HelloWorld.vue","webpack:///src/App.vue","webpack:///./src/App.vue?1e40","webpack:///./src/App.vue","webpack:///./src/main.js"],"names":["isNonPhrasingTag","makeMap","str","expectsLowerCase","map","create_default","list","split","i","length","val","toLowerCase","no","attribute","ncname","qnameCapture","startTagOpen","RegExp","startTagClose","endTag","doctype","comment","conditionalComment","isPlainTextElement","reCache","decodingMap","&lt;","&gt;","&quot;","&amp;","&#10;","&#9;","encodedAttr","encodedAttrWithNewLines","isIgnoreNewlineTag","shouldIgnoreFirstNewline","tag","html","decodeAttr","value","shouldDecodeNewlines","re","replace","match","markString","interpolationMark","extractStringFromJSCode","code","filter","stringList","extractStringFromBabelAST","ast","type","_ast","push","expressions","quasis","some","cooked","forEach","item","Array","isArray","keys","keys_default","key","parse","allowAwaitOutsideFunction","allowImportExportEverywhere","allowReturnOutsideFunction","allowSuperOutsideMethod","program","sortASTList","index","reduce","raw","astItem","first","last","sort","item1","item2","start","jsCodeString","jsCode","_ref","arguments","undefined","_ref$filter","_ref$startNo","startNo","extractString","codeLengthChange","cacheTemplateMap","end","replaceString","replaceCode","originalCode","substring","word","replaceType","_originalCode","arr","result","filterAttrNames","vueCodeString","extractStrings","changeLength","level","topTagName","options","stack","expectHTML","isUnaryTag","canBeLeftOpenTag","lastTag","endTagLength","stackedTag","reStackedTag","rest","all","text","slice","chars","parseEndTag","textEnd","indexOf","test","commentEnd","advance","conditionalEnd","doctypeMatch","endTagMatch","curIndex","startTagMatch","parseStartTag","handleStartTag","tagName","next","n","attrs","attr","array","unarySlash","unary","l","args","quotationMarks","name","lowerCasedTag","pos","lowerCasedTagName","parseHTML","prefixCode","_extractStrings","_item","assign_default","concat","substr","e","console","warn","trim","content","_start","startIndex","endIndex","getKeyName","_len","_key","toConsumableArray_default","join","HelloWorld","data","pageName","findWordArr","resultCode","keyCode","computed","showReplaceCode","this","findWord","used","showReplaceCodeHTML","div","document","createElement","textContent","innerHTML","replaceDisable","bool","watch","methods","analyse","window","extends_default","_this","keyArr","t","_ref2","slicedToArray_default","goback2","goback","getKey","_this2","asyncToGenerator_default","regenerator_default","a","mark","_callee","wrap","_context","prev","$Spin","show","render","h","class","props","size","axios_default","get","sent","_data","dst","t0","error","$Message","hide","stop","focus","querySelectorAll","scrollIntoView","classList","add","blur","remove","components_HelloWorld","_vm","_h","$createElement","_c","_self","staticClass","gutter","span","domProps","_s","_v","long","on","click","model","callback","$$v","expression","slot","_l","$set","placeholder","on-focus","$event","on-blur","_e","staticStyle","width","disabled","directives","rawName","rows","cols","input","target","composing","staticRenderFns","App","components","__webpack_require__","normalizeComponent","ssrContext","selectortype_template_index_0_src_App","id","src_App","App_normalizeComponent","Vue","use","iView","config","productionTip","el","template"],"mappings":"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","file":"static/js/app.f80566b7efa6248746f0.js","sourcesContent":["const isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\r\n    'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\r\n    'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\r\n    'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\r\n    'title,tr,track');\r\nexport function makeMap(str, expectsLowerCase) {\r\n    const map = Object.create(null);\r\n    const list = str.split(',');\r\n    for (let i = 0; i < list.length; i++) {\r\n        map[list[i]] = true;\r\n    }\r\n    return expectsLowerCase\r\n        ? val => map[val.toLowerCase()]\r\n        : val => map[val];\r\n}\r\n// \r\nconst no = (...arg) => false;\r\n// Regular Expressions for parsing tags and attributes\r\n// 属性正在？？没看懂，大意应该是取出xx=yy中，取出xx、=、yy这三个值\r\n// 其中yy这个值可能是带\"\"或者''，要将\"和'去除\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\r\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\r\n// but for Vue templates we can enforce a simple charset\r\n// 根据w3c标准，出的标签名正则\r\nconst ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\r\n// 带命名空间的标签名正则\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;\r\n// 开始标签正则\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`);\r\n// 开始标签的结束正则\r\nconst startTagClose = /^\\s*(\\/?)>/;\r\n// 结束标签的正则\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`);\r\n// 声明引用正则。[^>]？？？\r\nconst doctype = /^<!DOCTYPE [^>]+>/i;\r\n// #7298: escape - to avoid being pased as HTML comment when inlined in page\r\n// 注释正则\r\nconst comment = /^<!\\--/;\r\n// 注释正则\r\nconst conditionalComment = /^<!\\[/;\r\n// 忽略script，style，textarea里面的内容\r\nexport const isPlainTextElement = makeMap('script,style,textarea', true);\r\nconst reCache = {};\r\n// html转义\r\nconst decodingMap = {\r\n    '&lt;': '<',\r\n    '&gt;': '>',\r\n    '&quot;': '\"',\r\n    '&amp;': '&',\r\n    '&#10;': '\\n',\r\n    '&#9;': '\\t'\r\n};\r\n// html转义正则。属性是否允许换行？？？难度属性还允许换行？？？\r\nconst encodedAttr = /&(?:lt|gt|quot|amp);/g;\r\nconst encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g;\r\n// #5992\r\nconst isIgnoreNewlineTag = makeMap('pre,textarea', true);\r\nconst shouldIgnoreFirstNewline = (tag, html) => tag && isIgnoreNewlineTag(tag) && html[0] === '\\n';\r\n/**\r\n * 给属性值做html解码。在xml里面，属性值是要编码的，如1<2要编码成1&lt;2。但是vue的template是不需要。\r\n * 该函数是给编码的html做解码\r\n * 如果刚好属性值未做编码，但是包含&lt;这类字符串怎么处理？？？\r\n * @param {any} value                   属性值\r\n * @param {any} shouldDecodeNewlines    是否支持换行的转码\r\n * @returns\r\n */\r\nfunction decodeAttr(value, shouldDecodeNewlines) {\r\n    const re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\r\n    return value.replace(re, match => decodingMap[match]);\r\n}\r\n/**\r\n * 核心函数，递归调用获取ast\r\n * @export\r\n * @param {any} html        html文档片段\r\n * @param {any} options     配置\r\n */\r\nexport function parseHTML(html, options) {\r\n    const stack = [];\r\n    // 是否采用html规则\r\n    const expectHTML = options.expectHTML;\r\n    // 判断自闭合标签。i18n不做自闭和标签判断\r\n    const isUnaryTag = no;\r\n    // 可以省略闭合标签。i18n需要做判断\r\n    const canBeLeftOpenTag = makeMap('');\r\n    // 当前解析到html第几个字符\r\n    let index = 0;\r\n    // 用于循环的元素\r\n    let last, \r\n    // 找到的标签\r\n    lastTag;\r\n    // 循环递归获取html\r\n    while (html) {\r\n        last = html;\r\n        // Make sure we're not in a plaintext content element like script/style\r\n        if (!lastTag || !isPlainTextElement(lastTag)) {\r\n            // 没有上一级标签，或者上一级标签不为script/style这种不需要内容的元素\r\n            // 寻找第一个<开发的索引，表示可以开始找标签\r\n            let textEnd = html.indexOf('<');\r\n            if (textEnd === 0) {\r\n                // 以<开头\r\n                // 判断是否是注释\r\n                // 注意注释的匹配级别最高\r\n                if (comment.test(html)) {\r\n                    const commentEnd = html.indexOf('-->');\r\n                    // 跳过\r\n                    if (commentEnd >= 0) {\r\n                        if (typeof options.comment === 'function') {\r\n                            options.comment(html.substring(4, commentEnd));\r\n                        }\r\n                        // 越过注释\r\n                        advance(commentEnd + 3);\r\n                        continue;\r\n                    }\r\n                    else {\r\n                        // 未找到注释解释，抛错\r\n                    }\r\n                }\r\n                // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\r\n                if (conditionalComment.test(html)) {\r\n                    const conditionalEnd = html.indexOf(']>');\r\n                    if (conditionalEnd >= 0) {\r\n                        advance(conditionalEnd + 2);\r\n                        continue;\r\n                    }\r\n                }\r\n                // Doctype:\r\n                // 移除Doctype\r\n                const doctypeMatch = html.match(doctype);\r\n                if (doctypeMatch) {\r\n                    advance(doctypeMatch[0].length);\r\n                    continue;\r\n                }\r\n                // End tag:\r\n                // 先匹配结束标签，再匹配开始标签\r\n                const endTagMatch = html.match(endTag);\r\n                if (endTagMatch) {\r\n                    const curIndex = index;\r\n                    advance(endTagMatch[0].length);\r\n                    parseEndTag(endTagMatch[1], curIndex, index);\r\n                    continue;\r\n                }\r\n                // Start tag:\r\n                const startTagMatch = parseStartTag();\r\n                if (startTagMatch) {\r\n                    handleStartTag(startTagMatch);\r\n                    if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {\r\n                        advance(1);\r\n                    }\r\n                    continue;\r\n                }\r\n            }\r\n            let text, rest, next;\r\n            if (textEnd >= 0) {\r\n                // 如果前面有非<的内容，表示是文本\r\n                // 取出文本\r\n                rest = html.slice(textEnd);\r\n                while (!endTag.test(rest) &&\r\n                    !startTagOpen.test(rest) &&\r\n                    !comment.test(rest) &&\r\n                    !conditionalComment.test(rest)) {\r\n                    // < in plain text, be forgiving and treat it as text\r\n                    next = rest.indexOf('<', 1);\r\n                    if (next < 0)\r\n                        break;\r\n                    textEnd += next;\r\n                    rest = html.slice(textEnd);\r\n                }\r\n                text = html.substring(0, textEnd);\r\n                advance(textEnd);\r\n            }\r\n            // 如果没有匹配到<，表示是一个字符串文本\r\n            if (textEnd < 0) {\r\n                text = html;\r\n                html = '';\r\n                index += text.length;\r\n            }\r\n            if (options.chars && text) {\r\n                options.chars(text, index - text.length, index);\r\n            }\r\n        }\r\n        else {\r\n            // 上一级是script等标签\r\n            let endTagLength = 0;\r\n            const stackedTag = lastTag.toLowerCase();\r\n            const reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\r\n            const rest = html.replace(reStackedTag, function (all, text, endTag) {\r\n                endTagLength = endTag.length;\r\n                if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\r\n                    text = text\r\n                        .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\r\n                        .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\r\n                }\r\n                if (shouldIgnoreFirstNewline(stackedTag, text)) {\r\n                    text = text.slice(1);\r\n                }\r\n                if (options.chars) {\r\n                    options.chars(text, index, index + text.length);\r\n                }\r\n                return '';\r\n            });\r\n            index += html.length - rest.length;\r\n            html = rest;\r\n            parseEndTag(stackedTag, index - endTagLength, index);\r\n        }\r\n        if (html === last) {\r\n            options.chars && options.chars(html, index, index + html.length);\r\n            break;\r\n        }\r\n    }\r\n    // Clean up any remaining tags\r\n    parseEndTag();\r\n    // 向后html截取n个字符\r\n    function advance(n) {\r\n        index += n;\r\n        html = html.substring(n);\r\n    }\r\n    function parseStartTag() {\r\n        const start = html.match(startTagOpen);\r\n        if (start) {\r\n            const match = {\r\n                tagName: start[1],\r\n                attrs: [],\r\n                start: index\r\n            };\r\n            advance(start[0].length);\r\n            let end, attr;\r\n            while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\r\n                let start = index;\r\n                advance(attr[0].length);\r\n                let end = index;\r\n                match.attrs.push({\r\n                    array: attr,\r\n                    start,\r\n                    end,\r\n                });\r\n            }\r\n            if (end) {\r\n                match.unarySlash = end[1];\r\n                advance(end[0].length);\r\n                match.end = index;\r\n                return match;\r\n            }\r\n        }\r\n    }\r\n    // 处理匹配到的开始标签\r\n    function handleStartTag(match) {\r\n        const tagName = match.tagName;\r\n        const unarySlash = match.unarySlash;\r\n        if (expectHTML) {\r\n            if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\r\n                parseEndTag(lastTag);\r\n            }\r\n            if (canBeLeftOpenTag(tagName) && lastTag === tagName) {\r\n                parseEndTag(tagName);\r\n            }\r\n        }\r\n        const unary = isUnaryTag(tagName) || !!unarySlash;\r\n        const l = match.attrs.length;\r\n        const attrs = new Array(l);\r\n        // 取出属性\r\n        for (let i = 0; i < l; i++) {\r\n            const args = match.attrs[i].array;\r\n            const value = args[3] || args[4] || args[5] || '';\r\n            let quotationMarks = '';\r\n            if (args[3]) {\r\n                quotationMarks = '\"';\r\n            }\r\n            else if (args[4]) {\r\n                quotationMarks = '\\'';\r\n            }\r\n            const shouldDecodeNewlines = true;\r\n            attrs[i] = {\r\n                code: args[0],\r\n                name: args[1],\r\n                start: match.attrs[i].start,\r\n                end: match.attrs[i].end,\r\n                value: decodeAttr(value, shouldDecodeNewlines),\r\n                quotationMarks\r\n            };\r\n        }\r\n        if (!unary) {\r\n            stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\r\n            lastTag = tagName;\r\n        }\r\n        if (options.start) {\r\n            options.start(tagName, attrs, match.start, match.end);\r\n        }\r\n    }\r\n    /**\r\n     * 处理结束标签\r\n     * @param {any} [tagName]\r\n     * @param {any} [start]\r\n     * @param {any} [end]\r\n     */\r\n    function parseEndTag(tagName, start, end) {\r\n        let pos, lowerCasedTagName;\r\n        if (start == null)\r\n            start = index;\r\n        if (end == null)\r\n            end = index;\r\n        // Find the closest opened tag of the same type\r\n        if (tagName) {\r\n            lowerCasedTagName = tagName.toLowerCase();\r\n            for (pos = stack.length - 1; pos >= 0; pos--) {\r\n                if (stack[pos].lowerCasedTag === lowerCasedTagName) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // If no tag name is provided, clean shop\r\n            pos = 0;\r\n        }\r\n        if (pos >= 0) {\r\n            // Close all the open elements, up the stack\r\n            for (let i = stack.length - 1; i >= pos; i--) {\r\n                if (options.end) {\r\n                    // i == pos，判断如果是自动补充结束标签的，用start做end位置\r\n                    options.end(stack[i].tag, start, i == pos ? end : start);\r\n                }\r\n            }\r\n            // Remove the open elements from the stack\r\n            stack.length = pos;\r\n            lastTag = pos && stack[pos - 1].tag;\r\n        }\r\n        else if (lowerCasedTagName === 'br') {\r\n            if (options.start) {\r\n                options.start(tagName, [], start, end);\r\n            }\r\n        }\r\n        else if (lowerCasedTagName === 'p') {\r\n            if (options.start) {\r\n                options.start(tagName, [], start, end);\r\n            }\r\n            if (options.end) {\r\n                options.end(tagName, start, end);\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/vueCodeString/html-parser.ts","// 标记的符号\r\nexport const markString = ['-||', '||-'];\r\n// 标记的符号\r\nexport const interpolationMark = ['%$$', '$$%'];\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/common.ts","import { parse } from '@babel/parser';\r\nimport { markString, interpolationMark } from './common';\r\n/**\r\n * 使用babel的parse，找出模板中所用字符串，并按照其出现在code里面的位置排序\r\n * @param {string} code\r\n * @returns {SortASTItem[]}\r\n */\r\nfunction extractStringFromJSCode(code, filter) {\r\n    let result = parse(code, {\r\n        allowAwaitOutsideFunction: true,\r\n        allowImportExportEverywhere: true,\r\n        allowReturnOutsideFunction: true,\r\n        allowSuperOutsideMethod: true,\r\n    });\r\n    // 去除code里面所有字符串的ast的集合\r\n    let stringList = [];\r\n    extractStringFromBabelAST(result.program, stringList, filter);\r\n    // 排序字符串，并将字符串封装为sortASTList对象\r\n    let sortASTList = [];\r\n    stringList.forEach((ast, index) => {\r\n        if (Array.isArray(ast)) {\r\n            // 是数组表示是带插值的模板字符串，特殊对待，将其封装为自定义的SortTemplateQuasisASTItem对象\r\n            let value = ast.reduce((value, item, index) => {\r\n                // 将多个模板字符串用插入赋表示，如果`test${'xxx'},${'yyy'}`改为'test{0},{1}'，这样xxx和yyy可以插入到对应的{}中\r\n                if (index < ast.length - 1) {\r\n                    return value + item.value.raw + `{${index}}`;\r\n                }\r\n                else {\r\n                    return value + item.value.raw;\r\n                }\r\n            }, '');\r\n            ast.map((astItem, i) => {\r\n                sortASTList.push({\r\n                    index,\r\n                    type: 'TemplateQuasis',\r\n                    item: astItem,\r\n                    first: i == 0,\r\n                    last: i == ast.length - 1,\r\n                    value: value\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            // 如果不是数组，表示是字符串字面量或者是不带插值的模板字符串字面量\r\n            sortASTList.push({\r\n                index,\r\n                type: 'String',\r\n                item: ast\r\n            });\r\n        }\r\n    });\r\n    sortASTList.sort((item1, item2) => item1.item.start - item2.item.start);\r\n    return sortASTList;\r\n}\r\n/**\r\n * 递归将ast树中的字符串取出，放到stringList里面\r\n * @param {*} ast                       ast树\r\n * @param {StringASTType[]} stringList  保存字符串\r\n */\r\nfunction extractStringFromBabelAST(ast, stringList, filter) {\r\n    if ('ImportDeclaration' === ast.type) {\r\n        // 忽略一些语法中的字符串，如Import中的路径\r\n        return;\r\n    }\r\n    else if ('StringLiteral' === ast.type || 'DirectiveLiteral' === ast.type) {\r\n        let _ast = ast;\r\n        if (filter(_ast.value)) {\r\n            stringList.push(ast);\r\n        }\r\n    }\r\n    else if ('TemplateLiteral' === ast.type) {\r\n        // 对于模板字符串要特殊处理，如果起包含插值（expressions），每个插值在分别遍历\r\n        if (ast.expressions && ast.expressions.length && ast.quasis.length > 1) {\r\n            if (ast.quasis.some((_ast) => {\r\n                return filter(_ast.value.cooked);\r\n            })) {\r\n                stringList.push(ast.quasis);\r\n                ast.expressions.forEach(item => extractStringFromBabelAST(item, stringList, filter));\r\n            }\r\n            else {\r\n                ast.expressions.forEach(item => extractStringFromBabelAST(item, stringList, filter));\r\n            }\r\n        }\r\n        else {\r\n            let _ast = ast;\r\n            if (filter(_ast.quasis[0].value.cooked)) {\r\n                stringList.push(_ast.quasis[0]);\r\n            }\r\n        }\r\n    }\r\n    else if (Array.isArray(ast)) {\r\n        // 如果是ast树的数组，逐个递归\r\n        ast.forEach(item => extractStringFromBabelAST(item, stringList, filter));\r\n    }\r\n    else {\r\n        // 对于非模板字符串和普通字符串的类型，检查其各个对象，看是否包含子ast树或者数组\r\n        // 这主要是每种类型分别处理难度太大，因此逐个字段遍历，效率低但是无需知晓每一种ast类型的细节\r\n        let keys = Object.keys(ast);\r\n        keys.forEach(key => {\r\n            if (ast[key] && ast[key].type || Array.isArray(ast[key])) {\r\n                extractStringFromBabelAST(ast[key], stringList, filter);\r\n            }\r\n        });\r\n    }\r\n}\r\nexport default {\r\n    /**\r\n     * 从js代码中提取指定语言字符串\r\n     * @param {string} jsCode\r\n     * @param {ExtractStringOptions} [{filter = ()=> true, startNo = 0}={}]\r\n     * @returns {ExtractJSStringResult}\r\n     */\r\n    extractStringFromJS(jsCode, { filter = () => true, startNo = 0 } = {}) {\r\n        // 收集的导出字符串\r\n        let extractString = [];\r\n        // 排序好的SortASTItem数组\r\n        let stringASTList = extractStringFromJSCode(jsCode, filter);\r\n        // jsCode改变的长度，用于下一次替换做补偿\r\n        let codeLengthChange = 0;\r\n        // 缓存模板字符串的map\r\n        let cacheTemplateMap = {};\r\n        stringASTList.forEach(item => {\r\n            if (item.type == 'String') {\r\n                // 普通字符串和没有插值的模板字符串用-||index||-，占位\r\n                // 替换步骤：\r\n                // 1.生成替换的字符串replaceString（-||index||-）\r\n                // 2.将replaceString替换到jsCode中\r\n                // 3.计算jsCode改变的长度，用于下一次替换做补偿\r\n                // 4.将原始字符串压入extractString栈，进行下一次替换\r\n                let start = item.item.start + codeLengthChange, end = item.item.end + codeLengthChange, index = (startNo + item.index);\r\n                if ('StringLiteral' == item.item.type || 'DirectiveLiteral' == item.item.type) {\r\n                    let replaceString = markString[0] + index + markString[1];\r\n                    extractString.push({\r\n                        index,\r\n                        replaceCode: replaceString,\r\n                        originalCode: jsCode.substring(start, end),\r\n                        word: item.item.value,\r\n                        type: 'string',\r\n                        replaceType: 'js',\r\n                    });\r\n                    jsCode = jsCode.substring(0, start) + replaceString + jsCode.substring(end);\r\n                    codeLengthChange += item.item.start - item.item.end + replaceString.length;\r\n                }\r\n                else {\r\n                    start = start - 1;\r\n                    end = end + 1;\r\n                    let replaceString = markString[0] + index + markString[1];\r\n                    extractString.push({\r\n                        index,\r\n                        replaceCode: replaceString,\r\n                        originalCode: jsCode.substring(start, end),\r\n                        word: item.item.value.cooked,\r\n                        type: 'string',\r\n                        replaceType: 'js',\r\n                    });\r\n                    jsCode = jsCode.substring(0, start) + replaceString + jsCode.substring(end);\r\n                    codeLengthChange += item.item.start - item.item.end - 2 + replaceString.length;\r\n                }\r\n            }\r\n            else if ('TemplateQuasis' == item.type) {\r\n                // 有插值的模板字符串用-||index%||。。||%index||-占位，其中%||。。||%是${。。}的占项，。。指${。。}插入的值\r\n                // 如模板字符串 `xxx${'yy'}zz`，不检出成-||0%||-||1||-||%0||-，0和1分别是xxx{0}zz和yy\r\n                let index = (startNo + item.index);\r\n                if (item.first) {\r\n                    let replaceString = markString[0] + index + interpolationMark[0];\r\n                    let originalCode = jsCode.substring(item.item.start - 1 + codeLengthChange, item.item.end + 2 + codeLengthChange);\r\n                    jsCode = jsCode.substring(0, item.item.start - 1 + codeLengthChange) + replaceString + jsCode.substring(item.item.end + 2 + codeLengthChange);\r\n                    cacheTemplateMap[index] = {\r\n                        start: item.item.start + codeLengthChange - 1,\r\n                        index: index,\r\n                        originalCode: [originalCode],\r\n                        extractString: {\r\n                            index: index,\r\n                            replaceCode: '',\r\n                            originalCode: '',\r\n                            word: item.value,\r\n                            type: 'template',\r\n                            replaceType: 'js',\r\n                        }\r\n                    };\r\n                    codeLengthChange += item.item.start - item.item.end - 3 + replaceString.length;\r\n                    extractString.push(cacheTemplateMap[index].extractString);\r\n                    jsCode = jsCode;\r\n                }\r\n                else if (item.last) {\r\n                    let replaceString = interpolationMark[1] + index + markString[1];\r\n                    let originalCode = jsCode.substring(item.item.start - 1 + codeLengthChange, item.item.end + 1 + codeLengthChange);\r\n                    cacheTemplateMap[index].originalCode.push(originalCode);\r\n                    jsCode = jsCode.substring(0, item.item.start - 1 + codeLengthChange) + replaceString + jsCode.substring(item.item.end + 1 + codeLengthChange);\r\n                    // 修正replaceCode和originalCode\r\n                    let replaceCode = jsCode.substring(cacheTemplateMap[index].start, item.item.start - 1 + codeLengthChange + replaceString.length);\r\n                    let _originalCode = cacheTemplateMap[index].originalCode.reduce((code, item, i, arr) => {\r\n                        if (i === 0) {\r\n                            return code.replace(markString[0] + index + interpolationMark[0], item);\r\n                        }\r\n                        if (i === arr.length - 1) {\r\n                            return code.replace(interpolationMark[1] + index + markString[1], item);\r\n                        }\r\n                        return code.replace(interpolationMark[1] + index + interpolationMark[0], item);\r\n                    }, replaceCode);\r\n                    cacheTemplateMap[index].extractString.originalCode = _originalCode;\r\n                    cacheTemplateMap[index].extractString.replaceCode = replaceCode;\r\n                    delete cacheTemplateMap[index];\r\n                    codeLengthChange += item.item.start - item.item.end - 2 + replaceString.length;\r\n                }\r\n                else {\r\n                    let replaceString = interpolationMark[1] + index + interpolationMark[0];\r\n                    let originalCode = jsCode.substring(item.item.start - 1 + codeLengthChange, item.item.end + 2 + codeLengthChange);\r\n                    cacheTemplateMap[index].originalCode.push(originalCode);\r\n                    jsCode = jsCode.substring(0, item.item.start - 1 + codeLengthChange) + replaceString + jsCode.substring(item.item.end + 2 + codeLengthChange);\r\n                    codeLengthChange += item.item.start - item.item.end - 3 + replaceString.length;\r\n                    jsCode = jsCode;\r\n                }\r\n            }\r\n        });\r\n        return {\r\n            result: jsCode,\r\n            markString: markString,\r\n            interpolationMark: interpolationMark,\r\n            extractString: extractString,\r\n        };\r\n    }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/jsCodeString.ts","import { parseHTML } from './vueCodeString/html-parser';\r\nimport { markString, interpolationMark } from './common';\r\nimport jsCodeString from './jsCodeString';\r\nconst filterAttrNames = ['v-for'];\r\nexport default {\r\n    /**\r\n     * 从js代码中提取指定语言字符串\r\n     * @param {string} jsCode\r\n     * @param {string} [language='Chinese']\r\n     * @returns {ExtractJSStringResult}\r\n     */\r\n    extractStringFromVue(jsCode, { filter = () => true, startNo = 0 } = {}) {\r\n        let extractStrings = [];\r\n        // 解析过程中jsCode源码长度变化\r\n        let changeLength = 0;\r\n        // 当前标签的层级\r\n        let level = 0;\r\n        // 顶级标签，对应vue的sfc文件的style、template、script、自定义标签等\r\n        let topTagName;\r\n        parseHTML(jsCode, {\r\n            start(tagName, attr, start, end) {\r\n                if (level === 0) {\r\n                    topTagName = tagName;\r\n                    level++;\r\n                }\r\n                else if ('template' === tagName && 'template' === topTagName) {\r\n                    level++;\r\n                }\r\n                if (topTagName === 'template') {\r\n                    attr.forEach(item => {\r\n                        // 如没有value，或者是忽略的属性，不处理\r\n                        if (item.value && filterAttrNames.indexOf(item.name.toLowerCase()) === -1) {\r\n                            // 如果是v-、:、@开头的，表示是vue的绑定属性，需要做替换\r\n                            if (item.name.match(/^[:@]|v-/)) {\r\n                                let prefixCode = item.code.split('=')[0];\r\n                                let code = item.value;\r\n                                if ('\"' === item.quotationMarks) {\r\n                                    code = code.replace(/\\\\\"/g, '\"');\r\n                                }\r\n                                else if (\"'\" === item.quotationMarks) {\r\n                                    code = code.replace(/\\\\'/g, \"'\");\r\n                                }\r\n                                try {\r\n                                    let result = jsCodeString.extractStringFromJS(code, {\r\n                                        startNo: extractStrings.length,\r\n                                        filter\r\n                                    });\r\n                                    if (result.extractString.length > 0) {\r\n                                        let _extractStrings = [];\r\n                                        result.extractString.forEach((_item, index) => {\r\n                                            let extractString = Object.assign({}, _item, { replaceType: 'vue-attr', quotationMarks: item.quotationMarks });\r\n                                            _extractStrings.push(extractString);\r\n                                        });\r\n                                        extractStrings = extractStrings.concat(_extractStrings);\r\n                                        jsCode = jsCode.substr(0, item.start + changeLength) + prefixCode + '=' + item.quotationMarks\r\n                                            + result.result + item.quotationMarks + jsCode.substr(item.end + changeLength);\r\n                                        changeLength += result.result.length - code.length;\r\n                                    }\r\n                                }\r\n                                catch (e) {\r\n                                    console.warn(code, '\\n', e);\r\n                                }\r\n                            }\r\n                            else if (item.name.match(/^[a-zA-Z_]+/g) && filter(item.value)) {\r\n                                // 如果是用普通变量名开头，表示是非绑定字段，使用“:”重新绑定\r\n                                let quotationMarks = item.quotationMarks == '\"' ? \"'\" : '\"';\r\n                                let replaceCode = `${markString[0]}${extractStrings.length}${markString[1]}`;\r\n                                let extractString = {\r\n                                    index: extractStrings.length,\r\n                                    originalCode: item.code.trim(),\r\n                                    replaceCode: `:${item.name}=${quotationMarks}${replaceCode}${quotationMarks}`,\r\n                                    word: item.value,\r\n                                    type: 'string',\r\n                                    replaceType: 'attr'\r\n                                };\r\n                                extractStrings.push(extractString);\r\n                                jsCode = jsCode.substr(0, item.start + changeLength) + item.code.split(item.name[0])[0] + replaceCode + jsCode.substr(item.end + changeLength);\r\n                                changeLength += replaceCode.length - extractString.originalCode.length;\r\n                            }\r\n                            // 非vue相关属性，工具不做处理\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            chars(content, start, end) {\r\n                if (topTagName === 'template') {\r\n                    // 剩余未解析内容\r\n                    let last = content, \r\n                    // 每一次转换后的start的值\r\n                    _start = start;\r\n                    while (last) {\r\n                        // 检测{{\r\n                        let startIndex = last.indexOf('{{'), \r\n                        // 本次处理的文本\r\n                        code;\r\n                        if (startIndex === 0) {\r\n                            // 检测}}，如果没有就将整个content合成一个\r\n                            let endIndex = last.indexOf('}}');\r\n                            if (endIndex !== -1) {\r\n                                // 先取出{{}}部分的文本\r\n                                code = last.substr(2, endIndex - 2);\r\n                                last = last.substr(endIndex + 2);\r\n                                try {\r\n                                    let result = jsCodeString.extractStringFromJS(code, {\r\n                                        startNo: extractStrings.length,\r\n                                        filter\r\n                                    });\r\n                                    if (result.extractString.length > 0) {\r\n                                        let _extractStrings = [];\r\n                                        result.extractString.forEach((item, index) => {\r\n                                            let extractString = Object.assign({}, item, { replaceType: 'vue-template' });\r\n                                            _extractStrings.push(extractString);\r\n                                        });\r\n                                        extractStrings = extractStrings.concat(_extractStrings);\r\n                                        jsCode = jsCode.substr(0, _start + changeLength) + '{{'\r\n                                            + result.result + '}}' + jsCode.substr(_start + code.length + 4 + changeLength);\r\n                                        changeLength += result.result.length - code.length;\r\n                                        _start += result.result.length + 3;\r\n                                    }\r\n                                }\r\n                                catch (e) {\r\n                                    console.warn(code, '\\n', e);\r\n                                }\r\n                                continue;\r\n                            }\r\n                        }\r\n                        if (startIndex > 0 && last.indexOf('}}') > -1) {\r\n                            // 将{{前的内容取出，封装成一个{{}}结构\r\n                            code = last.substr(0, startIndex);\r\n                            last = last.substr(startIndex);\r\n                        }\r\n                        else {\r\n                            code = last;\r\n                            last = '';\r\n                        }\r\n                        if (filter(code)) {\r\n                            let replaceCode = `${markString[0]}${extractStrings.length}${markString[1]}`;\r\n                            let extractString = {\r\n                                index: extractStrings.length,\r\n                                originalCode: code,\r\n                                replaceCode: `{{${replaceCode}}}`,\r\n                                word: code.trim(),\r\n                                type: 'string',\r\n                                replaceType: 'template'\r\n                            };\r\n                            extractStrings.push(extractString);\r\n                            jsCode = jsCode.substr(0, _start + changeLength) + replaceCode + jsCode.substr(_start + code.length + changeLength);\r\n                            changeLength += replaceCode.length - extractString.originalCode.length;\r\n                            _start = _start + code.length;\r\n                        }\r\n                    }\r\n                }\r\n                else if (topTagName === 'script') {\r\n                    let code = content;\r\n                    try {\r\n                        let result = jsCodeString.extractStringFromJS(code, {\r\n                            startNo: extractStrings.length,\r\n                            filter\r\n                        });\r\n                        if (result.extractString.length > 0) {\r\n                            let _extractStrings = [];\r\n                            result.extractString.forEach((item, index) => {\r\n                                let extractString = item;\r\n                                _extractStrings.push(extractString);\r\n                            });\r\n                            extractStrings = extractStrings.concat(_extractStrings);\r\n                            jsCode = jsCode.substr(0, start + changeLength) + result.result\r\n                                + jsCode.substr(end + changeLength);\r\n                            changeLength += result.result.length - code.length;\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.warn(code, '\\n', e);\r\n                    }\r\n                }\r\n            },\r\n            end(tagName) {\r\n                if (level === 1 && topTagName == tagName) {\r\n                    topTagName = undefined;\r\n                    level--;\r\n                }\r\n                else if (level > 1 && 'template' === tagName && 'template' === topTagName) {\r\n                    level--;\r\n                }\r\n            }\r\n        });\r\n        return {\r\n            // 提取字符串后的\r\n            result: jsCode,\r\n            // 提取后的标记\r\n            markString,\r\n            // 字符串插值的标记\r\n            interpolationMark,\r\n            // 提取的结果\r\n            extractString: extractStrings\r\n        };\r\n    }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/service/vueCodeString.ts","<template>\r\n    <div class=\"main\">\r\n        <template v-if=\"keyCode\">\r\n            <Row  :gutter=\"16\">\r\n                <Col span=\"12\">\r\n<pre class=\"content\" v-html=\"resultCode\"></pre>\r\n                </Col>\r\n                <Col span=\"12\">\r\n<pre class=\"content\">{\r\n    {{keyCode}}\r\n}</pre>\r\n                </Col>\r\n            </Row>\r\n                <Button long type=\"error\" @click=\"goback2\">\r\n                    返回\r\n                </Button>\r\n            </Row>\r\n        </template>\r\n        <template v-else-if=\"findWordArr.length > 0\">\r\n            <Input v-model='pageName'>\r\n                <span slot=\"prepend\">页面namespace</span>\r\n            </Input>\r\n            <Row  :gutter=\"16\">\r\n                <Col span=\"12\">\r\n<pre class=\"result\" v-html=\"showReplaceCodeHTML\" key=\"result\"></pre>\r\n                </Col>\r\n                <Col span=\"12\">\r\n                    <ul class=\"word-list\">\r\n                        <li class=\"word-list-item\" v-for=\"word in findWordArr\" :key=\"word.index\">\r\n                            <Checkbox v-model=\"word.used\" >{{word.index + 1}}. {{word.word}}</Checkbox>\r\n                            <p class=\"word-list-item-key\">\r\n                                <Input v-if=\"word.used\" @on-focus=\"focus(word.index)\" \r\n                                    @on-blur=\"blur(word.index)\" placeholder=\"请输入该国际化文本的key\" v-model=\"word.key\" />\r\n                            </p>\r\n                        </li>\r\n                    </ul>\r\n                </Col>\r\n            </Row>\r\n            <Row  :gutter=\"16\">\r\n                <Col span=\"12\">\r\n                    <Button long type=\"error\" @click=\"goback\">\r\n                        返回\r\n                    </Button>\r\n                </Col>\r\n                <!-- <Col span=\"8\">\r\n                    <Button long @click=\"getKey\">\r\n                        生成未完成的KEY\r\n                    </Button>\r\n                </Col> -->\r\n                <Col span=\"12\">\r\n                    <Tooltip content=\"请输入所有国际化文本的key\" v-if=\"!replaceDisable\" style=\"width: 100%;\">\r\n                        <Button :disabled=\"true\" long type=\"primary\">\r\n                            替换\r\n                        </Button>\r\n                    </Tooltip>\r\n                    <Button v-else long type=\"primary\" @click=\"replace\">\r\n                        替换\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </template>\r\n        <template v-else>\r\n            <div class=\"inputCode\">\r\n                <textarea placeholder=\"输入要提取国际化的页面代码\" class=\"content\" rows=\"40\" cols=\"100\" v-model=\"code\"></textarea>\r\n                <Button type=\"primary\" @click=\"analyse\" long>寻找中文字符</Button>\r\n            </div>\r\n        </template>\r\n    </div>\r\n</template>\r\n<style scoped>\r\n    .main{\r\n        padding: 10px;\r\n        width: calc(100vw - 20px);\r\n        height: 100vh;\r\n        box-sizing: border-box;\r\n        margin: 0 auto;\r\n    }\r\n    .main button{\r\n        padding: 5px;\r\n        cursor: pointer;\r\n    }\r\n    .inputCode{\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n    .inputPageName{\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        align-items: center;\r\n        padding: 5px 0;\r\n    }\r\n\r\n    .layout{\r\n        display: flex;\r\n    }\r\n    .content{\r\n        height: calc(100vh - 65px);\r\n        padding: 5px;\r\n        margin: 5px 0;\r\n        border: 1px solid #dcdee2;\r\n        border-radius: 5px;\r\n        overflow: auto;\r\n        text-align: left;\r\n    }\r\n    .result{\r\n        height: calc(100vh - 100px);\r\n        padding: 5px;\r\n        margin: 5px 0;\r\n        border: 1px solid #dcdee2;\r\n        border-radius: 5px;\r\n        overflow: auto;\r\n        text-align: left;\r\n    }\r\n    .word-list{\r\n        list-style: none;\r\n        height: calc(100vh - 100px);\r\n        padding: 5px;\r\n        margin: 5px 0;\r\n        border: 1px solid #dcdee2;\r\n        border-radius: 5px;\r\n        overflow: auto;\r\n        \r\n    }\r\n    .word-list li{\r\n        list-style: none;\r\n        justify-content: flex-start;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        margin-bottom: 15px;\r\n    }\r\n    .word-list-item-key{\r\n        width: 100%;\r\n    }\r\n    .main >>> .heightlight{\r\n        color: red;\r\n        font-weight: bold;\r\n    }\r\n    .main >>> .heightlight.active{\r\n        text-shadow: 0 0 1px #ffa606;\r\n        animation: hue 2s infinite linear;\r\n    }\r\n    @keyframes hue {\r\n        10% {\r\n            color: red;\r\n        }\r\n        50% {\r\n            color: #ffa606;\r\n        }\r\n        90% {\r\n            color: red;\r\n        }\r\n    }\r\n</style>\r\n<script>\r\nimport axios from 'axios'\r\nimport vueCodeString from '../service/vueCodeString.ts'\r\nimport {markString, interpolationMark} from '../service/common'\r\nfunction getKeyName(...str){\r\n    str = str.filter(str=>str).reduce((arr, name)=>{\r\n        return [...arr, ...(name.trim().split(/\\s+/g))]\r\n    }, [])\r\n    return str.slice(0, 3).map(name=>name.toLowerCase()).join('_')\r\n}\r\n\r\nexport default {\r\n    name: 'HelloWorld',\r\n    data () {\r\n        return {\r\n            pageName: '',\r\n            code: ``,\r\n            findWordArr: [],\r\n            replaceCode: '',\r\n            resultCode: '',\r\n            keyCode: '',\r\n        }\r\n    },\r\n    computed: {\r\n        showReplaceCode(){\r\n            if(!this.replaceCode){\r\n                return ''\r\n            }\r\n            let code = this.findWordArr.reduce((replaceCode, findWord, index)=>{\r\n                \r\n                if(!findWord.used){\r\n                    if(replaceCode.indexOf(`${markString[0]}${findWord.index}${interpolationMark[0]}`) > -1){\r\n                        let start = replaceCode.indexOf(`${markString[0]}${findWord.index}${interpolationMark[0]}`),\r\n                        end = replaceCode.indexOf(`${interpolationMark[1]}${findWord.index}${markString[1]}`) + `${markString[1]}${findWord.index}${interpolationMark[1]}`.length\r\n                    \r\n                        return replaceCode.substr(0, start) + findWord.originalCode + replaceCode.substr(end)\r\n                    } else {\r\n                        return replaceCode.replace(markString[0] + findWord.index + markString[1], findWord.originalCode)\r\n                    }\r\n                } else {\r\n                    replaceCode = replaceCode.replace(markString[0] + findWord.index + markString[1], findWord.replaceCode)\r\n                }\r\n                return replaceCode\r\n                    \r\n            },this.replaceCode)\r\n\r\n            return code\r\n        },\r\n        showReplaceCodeHTML(){\r\n\r\n            let div = document.createElement('div')\r\n            div.textContent = this.showReplaceCode\r\n            let html = div.innerHTML\r\n            html = this.findWordArr.reduce((html, word, index)=>{\r\n                return html.replace(`${markString[0]}${index}${markString[1]}`, `<span class=\"heightlight word${index}\">$t(${index + 1})</span>`)\r\n                    .replace(`${markString[0]}${index}${interpolationMark[0]}`, `<span class=\"heightlight word${index}\">$t(${index + 1}, [</span>`)\r\n                    .replace(`${interpolationMark[1]}${index}${interpolationMark[0]}`, `<span class=\"heightlight word${index}\">,</span>`)\r\n                    .replace(`${interpolationMark[1]}${index}${markString[1]}`, `<span class=\"heightlight word${index}\">])</span>`)\r\n            }, html)\r\n\r\n\r\n            return html\r\n        },\r\n        replaceDisable(){\r\n            return this.findWordArr.reduce((bool, findWord)=>bool && (!findWord.used || findWord.key), true)\r\n        }\r\n    },\r\n    watch: {\r\n        code(){\r\n            this.findWordArr = []\r\n            this.replaceCode = ''\r\n            this.resultCode = ''\r\n        },\r\n    },\r\n    methods: {\r\n        analyse(){\r\n            function hit(code){\r\n                return /[\\u4e00-\\u9fa5]/.test(code)\r\n            }\r\n\r\n            let result = vueCodeString.extractStringFromVue(this.code, {\r\n                filter: hit\r\n            })\r\n            window.result = result\r\n            this.replaceCode = result.result\r\n            this.findWordArr = result.extractString.map(item=>{\r\n                return {\r\n                    ...item,\r\n                    used: true,\r\n                    key: '',\r\n                }\r\n            })\r\n        },\r\n        replace(){\r\n            let keyArr = []\r\n\r\n            let div = document.createElement('div')\r\n            div.textContent = this.showReplaceCode\r\n            let html = div.innerHTML\r\n\r\n            this.resultCode = this.findWordArr.reduce((replaceCode, word, index)=>{\r\n                \r\n                if(!word.used){\r\n                    if(replaceCode.indexOf(`${markString[0]}${word.index}${interpolationMark[0]}`) > -1){\r\n                        let start = replaceCode.indexOf(`${markString[0]}${word.index}${interpolationMark[0]}`),\r\n                        end = replaceCode.indexOf(`${interpolationMark[1]}${word.index}${markString[1]}`) + `${markString[1]}${word.index}${interpolationMark[1]}`.length\r\n                    \r\n                        return replaceCode.substr(0, start) + word.originalCode + replaceCode.substr(end)\r\n                    } else {\r\n                        return replaceCode.replace(markString[0] + word.index + markString[1], word.originalCode)\r\n                    }\r\n                } else {\r\n                    let key = getKeyName(this.pageName || '', word.key)\r\n\r\n                    keyArr.push([key, word.word])\r\n\r\n                    let quotationMarks = '\\''\r\n                    let t = '$t'\r\n                    if(word.replaceType === 'vue-attr' && '\\'' === word.quotationMarks){\r\n                        quotationMarks = '\"'\r\n                    }\r\n                    if(word.replaceType === 'js'){\r\n                        t = 'this.$t'\r\n                    }\r\n\r\n                    return replaceCode.replace(`${markString[0]}${index}${markString[1]}`, `<span class=\"heightlight\">${t}(${quotationMarks}${word.key}${quotationMarks})</span>`)\r\n                        .replace(`${markString[0]}${index}${interpolationMark[0]}`, `<span class=\"heightlight\">${t}(${quotationMarks}${word.key}${quotationMarks}, [</span>`)\r\n                        .replace(`${interpolationMark[1]}${index}${interpolationMark[0]}`, `<span class=\"heightlight\">, </span>`)\r\n                        .replace(`${interpolationMark[1]}${index}${markString[1]}`, `<span class=\"heightlight\">])</span>`)\r\n                }\r\n            }, html)\r\n\r\n            this.keyCode = keyArr.map(([key, value])=>`\"${key}\": \"${value.replace(/[\\n]/g, '')}\"`).join(',\\n    ')\r\n        },\r\n        goback2(){\r\n            this.keyCode = ''\r\n            this.resultCode = ''\r\n        },\r\n        goback(){\r\n            \r\n            this.replaceCode = ''\r\n            this.findWordArr = []\r\n        },\r\n        async getKey(){\r\n            try{\r\n                this.$Spin.show({\r\n                    render: (h) => {\r\n                        return h('div', [\r\n                            h('Icon', {\r\n                                'class': 'demo-spin-icon-load',\r\n                                props: {\r\n                                    type: 'ios-loading',\r\n                                    size: 18\r\n                                }\r\n                            }),\r\n                            h('div', 'Loading')\r\n                        ])\r\n                    }\r\n                });\r\n                let data = await axios.get(`/transapi?from=cht&to=en&query=${this.findWordArr.map(word=>word.word).join('%0A')}`)\r\n                this.findWordArr.forEach((_data, index)=>{\r\n                    if(!_data.key){\r\n                        _data.key = getKeyName(data.data.data[index].dst) \r\n                    } \r\n                })\r\n            } catch (e){\r\n                console.error(e)\r\n                this.$Message.error(e);\r\n            }\r\n             this.$Spin.hide();\r\n        },\r\n        focus(index){\r\n            let word = document.querySelectorAll('.word' + index)\r\n            if(word.length){\r\n                word[0].scrollIntoView()\r\n                for(let i = 0; i < word.length; i++){\r\n                    word[i].classList.add('active')\r\n                }\r\n            }\r\n        },\r\n        blur(index){\r\n            let word = document.querySelectorAll('.word' + index)\r\n            if(word.length){\r\n                word[0].scrollIntoView()\r\n                for(let i = 0; i < word.length; i++){\r\n                    word[i].classList.remove('active')\r\n                }\r\n            }\r\n        },\r\n    }\r\n}\r\n</script>\n\n\n// WEBPACK FOOTER //\n// src/components/HelloWorld.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"main\"},[(_vm.keyCode)?[_c('Row',{attrs:{\"gutter\":16}},[_c('Col',{attrs:{\"span\":\"12\"}},[_c('pre',{staticClass:\"content\",domProps:{\"innerHTML\":_vm._s(_vm.resultCode)}})]),_vm._v(\" \"),_c('Col',{attrs:{\"span\":\"12\"}},[_c('pre',{staticClass:\"content\"},[_vm._v(\"{\\n    \"+_vm._s(_vm.keyCode)+\"\\n}\")])])],1),_vm._v(\" \"),_c('Button',{attrs:{\"long\":\"\",\"type\":\"error\"},on:{\"click\":_vm.goback2}},[_vm._v(\"\\n                    返回\\n                \")])]:(_vm.findWordArr.length > 0)?[_c('Input',{model:{value:(_vm.pageName),callback:function ($$v) {_vm.pageName=$$v},expression:\"pageName\"}},[_c('span',{attrs:{\"slot\":\"prepend\"},slot:\"prepend\"},[_vm._v(\"页面namespace\")])]),_vm._v(\" \"),_c('Row',{attrs:{\"gutter\":16}},[_c('Col',{attrs:{\"span\":\"12\"}},[_c('pre',{key:\"result\",staticClass:\"result\",domProps:{\"innerHTML\":_vm._s(_vm.showReplaceCodeHTML)}})]),_vm._v(\" \"),_c('Col',{attrs:{\"span\":\"12\"}},[_c('ul',{staticClass:\"word-list\"},_vm._l((_vm.findWordArr),function(word){return _c('li',{key:word.index,staticClass:\"word-list-item\"},[_c('Checkbox',{model:{value:(word.used),callback:function ($$v) {_vm.$set(word, \"used\", $$v)},expression:\"word.used\"}},[_vm._v(_vm._s(word.index + 1)+\". \"+_vm._s(word.word))]),_vm._v(\" \"),_c('p',{staticClass:\"word-list-item-key\"},[(word.used)?_c('Input',{attrs:{\"placeholder\":\"请输入该国际化文本的key\"},on:{\"on-focus\":function($event){_vm.focus(word.index)},\"on-blur\":function($event){_vm.blur(word.index)}},model:{value:(word.key),callback:function ($$v) {_vm.$set(word, \"key\", $$v)},expression:\"word.key\"}}):_vm._e()],1)],1)}),0)])],1),_vm._v(\" \"),_c('Row',{attrs:{\"gutter\":16}},[_c('Col',{attrs:{\"span\":\"12\"}},[_c('Button',{attrs:{\"long\":\"\",\"type\":\"error\"},on:{\"click\":_vm.goback}},[_vm._v(\"\\n                        返回\\n                    \")])],1),_vm._v(\" \"),_c('Col',{attrs:{\"span\":\"12\"}},[(!_vm.replaceDisable)?_c('Tooltip',{staticStyle:{\"width\":\"100%\"},attrs:{\"content\":\"请输入所有国际化文本的key\"}},[_c('Button',{attrs:{\"disabled\":true,\"long\":\"\",\"type\":\"primary\"}},[_vm._v(\"\\n                            替换\\n                        \")])],1):_c('Button',{attrs:{\"long\":\"\",\"type\":\"primary\"},on:{\"click\":_vm.replace}},[_vm._v(\"\\n                        替换\\n                    \")])],1)],1)]:[_c('div',{staticClass:\"inputCode\"},[_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.code),expression:\"code\"}],staticClass:\"content\",attrs:{\"placeholder\":\"输入要提取国际化的页面代码\",\"rows\":\"40\",\"cols\":\"100\"},domProps:{\"value\":(_vm.code)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.code=$event.target.value}}}),_vm._v(\" \"),_c('Button',{attrs:{\"type\":\"primary\",\"long\":\"\"},on:{\"click\":_vm.analyse}},[_vm._v(\"寻找中文字符\")])],1)]],2)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-67fe4e2f\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/HelloWorld.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-67fe4e2f\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./HelloWorld.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./HelloWorld.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./HelloWorld.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-67fe4e2f\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./HelloWorld.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-67fe4e2f\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/HelloWorld.vue\n// module id = null\n// module chunks = ","<template>\r\n    <div id=\"app\">\r\n        <hello-world/>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport HelloWorld from './components/HelloWorld'\r\n\r\nexport default {\r\n    name: 'App',\r\n    components: {\r\n        HelloWorld\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n    html, body{\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n    #app {\r\n        font-family: 'Avenir', Helvetica, Arial, sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n        text-align: center;\r\n        color: #2c3e50;\r\n    }\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/App.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('hello-world')],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-6113e867\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6113e867\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/vue-loader/lib/selector?type=styles&index=0!./App.vue\")\n}\nvar normalizeComponent = require(\"!../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\nimport __vue_script__ from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\n/* template */\nimport __vue_template__ from \"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6113e867\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/vue-loader/lib/selector?type=template&index=0!./App.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/App.vue\n// module id = null\n// module chunks = ","// The Vue build version to load with the `import` command\r\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\r\nimport Vue from 'vue'\r\nimport App from './App'\r\nimport iView from 'iview';\r\nimport 'iview/dist/styles/iview.css';\r\n\r\nVue.use(iView);\r\nVue.config.productionTip = false\r\n\r\n/* eslint-disable no-new */\r\nnew Vue({\r\n  el: '#app',\r\n  components: { App },\r\n  template: '<App/>'\r\n})\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js"],"sourceRoot":""}